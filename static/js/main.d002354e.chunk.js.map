{"version":3,"sources":["components/draft/editControl/index.js","components/draft/plugins/tweet.js","components/draft/index.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["INLINE_STYLES","label","style","StyleButton","onToggle","e","preventDefault","props","className","this","active","onMouseDown","React","Component","InlineStyleControls","currentStyle","editorState","getCurrentInlineStyle","map","type","key","has","HANDLE_REGEX","HASHTAG_REGEX","findWithRegex","regex","contentBlock","callback","matchArr","start","text","getText","exec","index","length","decorationSignAt","strategy","contentState","component","styles","handle","data-offset-key","offsetKey","children","decorationHashTag","hashtag","onClick","window","open","root","fontFamily","padding","width","editor","border","cursor","fontSize","minHeight","button","marginTop","textAlign","color","direction","unicodeBidi","DraftEditor","onChange","setState","focus","handleKeyCommand","command","newState","RichUtils","state","_toggleInlineStyle","inlineStyle","toggleInlineStyle","EditorState","createEmpty","plugins","decorators","ref","element","App","src","logo","alt","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"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","file":"static/js/main.d002354e.chunk.js","sourcesContent":["import React from \"react\";\r\nvar INLINE_STYLES = [\r\n  { label: \"Bold\", style: \"BOLD\" },\r\n  { label: \"Italic\", style: \"ITALIC\" },\r\n  { label: \"Underline\", style: \"UNDERLINE\" },\r\n  { label: \"Monospace\", style: \"CODE\" }\r\n];\r\n\r\nclass StyleButton extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.onToggle = (e) => {\r\n      e.preventDefault();\r\n      this.props.onToggle(this.props.style);\r\n    };\r\n  }\r\n  render() {\r\n    let className = \"RichEditor-styleButton\";\r\n    if (this.props.active) {\r\n      className += \" RichEditor-activeButton\";\r\n    }\r\n    return (\r\n      <span className={className} onMouseDown={this.onToggle}>\r\n        {this.props.label}\r\n      </span>\r\n    );\r\n  }\r\n}\r\n\r\nconst InlineStyleControls = (props) => {\r\n  const currentStyle = props.editorState.getCurrentInlineStyle();\r\n\r\n  return (\r\n    <div className=\"RichEditor-controls\">\r\n      {INLINE_STYLES.map((type) => (\r\n        <StyleButton\r\n          key={type.label}\r\n          active={currentStyle.has(type.style)}\r\n          label={type.label}\r\n          onToggle={props.onToggle}\r\n          style={type.style}\r\n        />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default InlineStyleControls;\r\n","import React from \"react\";\r\n\r\nconst HANDLE_REGEX = /@[\\w]+/g;\r\nconst HASHTAG_REGEX = /#[\\w\\u0590-\\u05ff]+/g;\r\nfunction handleStrategy(contentBlock, callback, contentState) {\r\n  findWithRegex(HANDLE_REGEX, contentBlock, callback);\r\n}\r\nfunction hashtagStrategy(contentBlock, callback, contentState) {\r\n  findWithRegex(HASHTAG_REGEX, contentBlock, callback);\r\n}\r\nfunction findWithRegex(regex, contentBlock, callback) {\r\n  const text = contentBlock.getText();\r\n  let matchArr, start;\r\n  while ((matchArr = regex.exec(text)) !== null) {\r\n    start = matchArr.index;\r\n    callback(start, start + matchArr[0].length);\r\n  }\r\n}\r\nconst HandleSpan = (props) => {\r\n  return (\r\n    <span style={styles.handle} data-offset-key={props.offsetKey}>\r\n      {props.children}\r\n    </span>\r\n  );\r\n};\r\nconst HashtagSpan = (props) => {\r\n  return (\r\n    <button\r\n      style={styles.hashtag}\r\n      data-offset-key={props.offsetKey}\r\n      onClick={(e) => {\r\n        window.open(\"www.google.com.tw\", \"_blank\");\r\n      }}\r\n      // href={props.children}\r\n    >\r\n      {props.children}\r\n    </button>\r\n  );\r\n};\r\n\r\nconst decorationSignAt = { strategy: handleStrategy, component: HandleSpan };\r\nconst decorationHashTag = { strategy: hashtagStrategy, component: HashtagSpan };\r\n\r\nexport { decorationSignAt, decorationHashTag };\r\n\r\nconst styles = {\r\n  root: {\r\n    fontFamily: \"'Helvetica', sans-serif\",\r\n    padding: 20,\r\n    width: 600\r\n  },\r\n  editor: {\r\n    border: \"1px solid #ddd\",\r\n    cursor: \"text\",\r\n    fontSize: 16,\r\n    minHeight: 40,\r\n    padding: 10\r\n  },\r\n  button: {\r\n    marginTop: 10,\r\n    textAlign: \"center\"\r\n  },\r\n  handle: {\r\n    color: \"rgba(98, 177, 254, 1.0)\",\r\n    direction: \"ltr\",\r\n    unicodeBidi: \"bidi-override\"\r\n  },\r\n  hashtag: {\r\n    color: \"rgba(95, 184, 138, 1.0)\"\r\n  }\r\n};\r\n","import React from \"react\";\r\nimport { EditorState, RichUtils } from \"draft-js\";\r\nimport Editor from \"draft-js-plugins-editor\";\r\nimport InlineStyleControls from \"./editControl/index\";\r\nimport { decorationSignAt, decorationHashTag } from \"./plugins/tweet\";\r\nimport \"./editorStyles.css\";\r\n\r\nclass DraftEditor extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      editorState: EditorState.createEmpty()\r\n    };\r\n    this.plugins = [];\r\n  }\r\n\r\n  onChange = (editorState) => {\r\n    this.setState({\r\n      editorState\r\n    });\r\n  };\r\n\r\n  focus = () => {\r\n    this.editor.focus();\r\n  };\r\n\r\n  handleKeyCommand = (command) => {\r\n    const newState = RichUtils.handleKeyCommand(\r\n      this.state.editorState,\r\n      command\r\n    );\r\n    if (newState) {\r\n      this.onChange(newState);\r\n      return \"handled\";\r\n    }\r\n    return \"not-handled\";\r\n  };\r\n\r\n  // onBoldClick = () => {\r\n  //   this.onChange(RichUtils.toggleInlineStyle(this.state.editorState, \"BOLD\"));\r\n  // };\r\n\r\n  _toggleInlineStyle = (inlineStyle) => {\r\n    this.onChange(\r\n      RichUtils.toggleInlineStyle(this.state.editorState, inlineStyle)\r\n    );\r\n  };\r\n  render() {\r\n    return (\r\n      <div className=\"RichEditor-root\">\r\n        <InlineStyleControls\r\n          editorState={this.state.editorState}\r\n          onToggle={this._toggleInlineStyle}\r\n        />\r\n        <Editor\r\n          editorState={this.state.editorState}\r\n          handleKeyCommand={this.handleKeyCommand}\r\n          plugins={this.plugins}\r\n          onChange={this.onChange}\r\n          decorators={[decorationSignAt, decorationHashTag]}\r\n          ref={(element) => {\r\n            this.editor = element;\r\n          }}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DraftEditor;\r\n","import React from \"react\";\nimport DraftEditor from \"./components/draft\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <div>\n          <DraftEditor />\n        </div>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}